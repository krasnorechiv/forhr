stages:
  - prepare
  - build
  - test
  - release-binary
  - docker-gen-image
  - create-auth
  - create-machine
  - connect-to-machine

variables:
  GO_VERSION: "${GO_VERSION}"
  APP_NAME: pelmennaya-backend
  MAJOR: "1"
  MINOR: "0"
  PATCH: "2"
  GOPATH: "$CI_PROJECT_DIR/.go"
  TF_VERS: "1.9.6"
  TF_VAR_zone1: "ru-central1-a"
  TF_VAR_vm_name: "pelmennaya-vm"
  TF_VAR_ssh_public_keys: "qqq"
  TF_CLI_CONFIG_FILE: "${CI_PROJECT_DIR}/repo/terraform/.terraformrc"

generate-version:
  stage: prepare
  script:
    - |
      if [[ -n "$CI_COMMIT_TAG" ]]; then
        # Релизная версия из тега (r1.2.3 → 1.2.3)
        VERSION=$(echo "$CI_COMMIT_TAG" | sed 's/^r//')  # Удаляем 'v' при наличии
        DIR_BRANCH=release
      elif [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
      # main без тега (например, ручной запуск пайплайна)
        VERSION="${MAJOR}.${MINOR}.${PATCH}"
        DIR_BRANCH=release
      elif [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
        # Develop версия (1.0.1-dev+commit)
        VERSION="${MAJOR}.${MINOR}.$(($PATCH + 1))-dev_$(echo "$CI_COMMIT_SHA" | cut -c1-8)"
        DIR_BRANCH=develop        
      elif [[ "$CI_COMMIT_BRANCH" =~ ^feature/ ]]; then
        # Feature версия (1.0.1-feat-branchname+commit)
        BRANCH_NAME=$(echo "$CI_COMMIT_REF_SLUG" | sed 's/feature-/feat-/')
        VERSION="${MAJOR}.${MINOR}.$(($PATCH + 1))-${BRANCH_NAME}_$(echo "$CI_COMMIT_SHA" | cut -c1-8)"
        DIR_BRANCH=feature      
      elif [[ "$CI_COMMIT_BRANCH" =~ ^release/ ]]; then
        # RC версия (1.0.1-rc.1+commit)
        RC_NUM=$(echo "$CI_COMMIT_REF_NAME" | awk -F'[-.]' '{print $2}')
        VERSION="${MAJOR}.${MINOR}.${PATCH}-rc.${RC_NUM}_$(echo "$CI_COMMIT_SHA" | cut -c1-8)"
        DIR_BRANCH=release-candidate            
      else
        # Fallback версия
        VERSION="${MAJOR}.${MINOR}.${PATCH}-unknown-$(echo "$CI_COMMIT_SHA" | cut -c1-8)"
        DIR_BRANCH=unknown
      fi
    - echo "VERSION=${VERSION}" > build.env
    - echo "BACKEND_VERSION=${VERSION}" >> build.env
    - echo "DIR_BRANCH=${DIR_BRANCH}" >> build.env

  artifacts:
    reports:
      dotenv: build.env

build-backend-code-job:
  stage: build
  image: golang:$GO_VERSION
  before_script:
    - export PATH="/usr/local/go/bin:$PATH"
    - mkdir -p .go backend/exe  # создать директории для кеша go и для бинаря
  script:
    - cd backend/
    - go build -o exe/$APP_NAME-$VERSION ./cmd/api
  needs:
    - generate-version
  artifacts:
    paths:
      - backend/exe/  # Явно передаём бинарник
    expire_in: 1 hour
      

sonarqube-check-backend:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd backend/
    - > 
      sonar-scanner 
      ${SONAR_PROJECT_KEY_BACK} 
      ${SONARQUBE_DIR} 
      ${SONARQUBE_URL} 
      ${SONAR_LOGIN} 
      -Dsonar.qualitygate.wait=true
  allow_failure: false
#  rules:
#    - if: $CI_COMMIT_REF_NAME == 'main' || $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_REF_NAME =~ /^feature\/.+/
  needs:
    - build-backend-code-job  

upload-binary-pelmennaya:
  stage: release-binary
  script:
    - ls backend/exe/
    - >
      curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}"
      --upload-file backend/exe/${APP_NAME}-${VERSION}
      ${NEXUS_REPO_URL}/repository/${NEXUS_REPO_BACKEND_NAME}/${DIR_BRANCH}/${APP_NAME}-${VERSION}
  needs:
    - job: build-backend-code-job
      artifacts: true
    - job: sonarqube-check-backend
      artifacts: true
    - job: generate-version
      artifacts: true

build-docker-backend-code-job:
  stage: docker-gen-image
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/${APP_NAME}"
      --build-arg "CRED_NEXUS=${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}"
      --build-arg "URL_TO_DOWNLOAD=${NEXUS_REPO_URL}/repository/${NEXUS_REPO_BACKEND_NAME}/${DIR_BRANCH}"
      --build-arg "APP_NAME=${APP_NAME}-${VERSION}"
      --cache=true
  needs:
    - upload-binary-pelmennaya
    - generate-version

release-backend-docker-image:
  stage: docker-gen-image
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/$APP_NAME $VERSION
  needs:
    - build-docker-backend-code-job
    - generate-version

create-auth-and-bucket:
  image: alpine:3.18
  stage: create-auth
  before_script:
      - apk add bash curl unzip envsubst unzip jq
      - curl -LO "https://hashicorp-releases.yandexcloud.net/terraform/${TF_VERS}/terraform_${TF_VERS}_linux_amd64.zip"
      - unzip terraform_${TF_VERS}_linux_amd64.zip -d /usr/local/bin/
      - chmod +x /usr/local/bin/terraform
      - terraform --version
      - curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i /usr/local -n
      - export PATH=$PATH:/usr/local/bin
  script: 
    - yc config set token ${YC_OATH_ID};
      yc config set folder-id ${TF_VAR_folder_id}
    - envsubst < ./repo/createbucket.sh | bash
  needs:
    - release-backend-docker-image
  artifacts:
    reports:
      dotenv: auth.env
    expire_in: 30 minutes
    access: 'none' #через вебку не будет виден токен. Передача только между пайплайнами

terraforming:
  image: alpine:3.18
  stage: create-machine
  before_script:
      - apk add bash curl unzip envsubst unzip jq
      - curl -LO "https://hashicorp-releases.yandexcloud.net/terraform/${TF_VERS}/terraform_${TF_VERS}_linux_amd64.zip"
      - unzip terraform_${TF_VERS}_linux_amd64.zip -d /usr/local/bin/
      - chmod +x /usr/local/bin/terraform
      - terraform --version
      - curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i /usr/local -n
      - export PATH=$PATH:/usr/local/bin  
  script:
    - cd ./repo/terraform
    - >
      terraform init 
      -backend-config="access_key=${AWS_ACCESS_KEY_ID}"
      -backend-config="secret_key=${AWS_SECRET_ACCESS_KEY}"
      -backend-config="bucket=${TF_STATE_BUCKET}"
    - terraform show
    - terraform apply -auto-approve -var="vm_image_id=ubuntu-2204-lts"
    - echo "PUBLIC_IP=$(terraform output -json | jq -r '.public_address.value')" > $CI_PROJECT_DIR/terraform.env
  needs:
    - create-auth-and-bucket  
  artifacts:
    reports:
      dotenv: "terraform.env"
  retry:
    max: 2
    when: always

connect-to-machine:
  stage: connect-to-machine
  image: alpine:3.18
  needs: 
    - terraforming
    - generate-version
  before_script:
    - apk add --no-cache openssh-client ansible envsubst
    - eval $(ssh-agent -s)  
    - echo "$SSH_ID_RSA" | base64 -d |  tr -d '\r' | ssh-add -  
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H "$PUBLIC_IP" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - export ANSIBLE_CONFIG=$(pwd)/repo/ansible/ansible.cfg
  script:
    - ssh ansible@"$PUBLIC_IP" "echo 'Подключение успешно!'"
    - envsubst < $(pwd)/repo/ansible/inventory/inventory.yml.tmpl > $(pwd)/repo/ansible/inventory/inventory.yml
    - envsubst < $(pwd)/repo/ansible/group_vars/all.yml.tmpl > $(pwd)/repo/ansible/group_vars/all.yml
    - ansible-playbook ./repo/ansible/ansible-playbook.yml
      --tags all-check,backend
      -i $(pwd)/repo/ansible/inventory/inventory.yml 
      -e "registry_image_backend=${CI_REGISTRY_IMAGE}/${APP_NAME}:${VERSION}" 
      -e "backend_port=8081"
      -e "@repo/ansible/group_vars/all.yml"
  retry:
    max: 2
    when: always