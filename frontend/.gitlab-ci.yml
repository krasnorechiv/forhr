stages:
  - build
  - test
  - release-binary
  - docker-gen-image
variables:
  NODE_VERSION: "${NODE_VERSION}"
  APP_NAME: pelmennaya-frontend-${VERSION}
  DOCKER_APP_NAME: pelmennaya-frontend
  VERSION: 1.0.${CI_PIPELINE_ID}-${CI_COMMIT_BRANCH}
cache:
  paths:
    - frontend/dist/ # передаю кеш в другие задачи

build-frontend-code-job:
  stage: build
  cache: []  
  image:
    name: node:${NODE_VERSION}
  variables:
    NODE_OPTIONS: "--openssl-legacy-provider"
    NODE_ENV: production 
    VUE_APP_API_URL: http://pelmennaya-backend:8081
  script:
    - cd frontend
    - npm install
    - npm run build


sonarqube-check-frontend:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd frontend/
    - > 
      sonar-scanner -X   
      ${SONAR_PROJECT_KEY_FRONT} 
      ${SONARQUBE_DIR} 
      ${SONARQUBE_URL} 
      ${SONAR_LOGIN} 
      -Dsonar.qualitygate.wait=true
  allow_failure: false
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main' || $CI_PIPELINE_SOURCE == 'merge_request_event'
  needs:
    - build-frontend-code-job  

upload-binary-pelmennaya:
  stage: release-binary
  script:
    - tar czvf ${APP_NAME}.tar.gz frontend/dist
    - >
      curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}"
      --upload-file ${APP_NAME}.tar.gz
      ${NEXUS_REPO_URL}/repository/${NEXUS_REPO_FRONTEND_NAME}/${VERSION}/${APP_NAME}.tar.gz
  needs:
    - sonarqube-check-frontend

build-docker-frontend-code-job:
  stage: docker-gen-image
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/${DOCKER_APP_NAME}"
      --build-arg "CRED_NEXUS=${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}"
      --build-arg "URL_TO_DOWNLOAD=${NEXUS_REPO_URL}/repository/${NEXUS_REPO_FRONTEND_NAME}/${VERSION}"
      --build-arg "APP_NAME=${DOCKER_APP_NAME}-${VERSION}"
      --cache=true

  needs:
    - upload-binary-pelmennaya

release-frontend-docker-image:
  stage: docker-gen-image
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/$DOCKER_APP_NAME $VERSION
  needs:
    - build-docker-frontend-code-job