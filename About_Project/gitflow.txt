Пока тестирую git flow. Что это из себя представляет:
1) Есть master ветка и чтобы ввозить новые фичи делаем от master ветки ветку develop
2) Задумали новую фичу делаем следующее: git checkout -b feature/production-build develop - или лучше git flow feature start production-build - мы создали новую ветку от ветки develop
3) Работаем в ней и публикуем её (делаем push) либо git flow feature publish имя-фичи
4) Когда работа с веткой завершена, мы можем просто слить с developer веткой: 
4.1) без gitflow: git checkout develop && git merge --no-ff production-build 
4.2) c gitflow: git flow feature finish production-build
------
Когда в ветку develop слито достаточно кода, от ветки девелоп создаётся релизная ветка, например release/0.3.0. Создание ветки означает следующий цикл релиза, в ходе которой новая функциональность уже не добавляется, а происходит отладка багов и всего такого. Когда всё готово, ветка release сливается с master. а Master обратно в develop. 
------
Сделаем новую релизную ветку:
Без использования gitflow: 
git checkout develop
git checkout -b release/0.5.0
При использовании git flow:
git flow release start 0.5.0
git flow release publish 0.5.0
(можно начать с определённого коммита)
Когда все правки закончены, то можно сливать в мастер и develop?
А ветка релиза удаляется. Но можно оставить если вдруг надо (при поддержке нескольких релизов)
Важно влить release обратно в develop. Так как в релизе могут быть критические обновления и т.д. Если команда делает акцена на проверку кода, то момент идеален для мердж реквеста. 
Релиз помечается тегом равным именем в ветке master. При инициализации может быть задан тег. 
Сливаем:
Без расширений git flow:
Переходим в ветку Develop: 
git checkout develop
и сливаем изменения с релизной веткой:
git merge release/0.5.0
Переходим в ветку master:
git checkout master
и сливаем изменения с релизной веткой:
git merge release/0.5.0
делаем тег релизу:
git tag r0.5.0
git push --tags

Или используем git flow:
git flow release finish '0.1.0'
------
Хотфиксы:
Они единственные собираются из мастер ветки. А потом уже сливаются в master и develop
Создание хотфикса без gitflow:
git checkout master
git checkout -b hotfix_branch
С использованием git-flow:
git flow hotfix start hotfix_branch 
Далее объединяется с мастер и девелопем и можно удалять хотфикс ветку:
Без gitflow:
1) git checkout master
2) git merge hotfix_branch
3) git checkout develop
4) git merge hotfix_branch
5) git branch -d hotfix_branch
или через git-flow
1) git flow hotfix finish hotfix_branch


Последовательность работы с gitflow:
1) из мастер создается ветка девелоп
2) из девелоп делаются ветки феютчуре
3) когда разработка фичи завершается она сливается с девелопом
4) из девелопа появляется ветка релиз
5) когда ветка релиза готова, она объединяется с develop и мастер
